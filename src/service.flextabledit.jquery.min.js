!function (t, e, n, i) { function o(e, n) { this.$element = t(e), this._init(n), this._renderTable() } var l = "flextabledit", s = { cut: "Cut", copy: "Copy", paste: "Paste", insert: "Insert", erase: "Erase", remove: "Remove", columnName: "Column name" }; o.prototype = { _getAbsPosition: function (e, n, i) { var o = (t(window).width(), e.offset()), l = this.$element.offset(), s = this.$table.outerWidth(), a = o.left - l.left - 1; a + n > s && (a = s - n, 0 > a && (a = 0)); var d = o.top - l.top + 26, r = { left: a, right: 0, top: d }; return r }, _unselect: function () { this.$element.find("th").removeClass("flxtblColSelected"); for (var e = this.$element.find("tbody tr"), n = 0; n < e.length; n++) t(e[n]).find("td").removeClass("flxtblColSelected flxtblRowSelected cellSelected"); this.$menuPopup && (this.$menuPopup.remove(), this.$menuPopup = null) }, _clearClipBoard: function () { this.$element.find("th").removeClass("flxtblColMarked"); for (var e = this.$element.find("tbody tr"), n = 0; n < e.length; n++) t(e[n]).find("td").removeClass("flxtblColMarked flxtblRowMarked cellMarked"); this.clipBoard = null }, _removeMenuPopupBtn: function () { this.$menuPopupBtn && (this.$menuPopupBtn.remove(), this.$menuPopupBtn = null) }, _unselectAll: function () { this._unselect(), this.$menuPopupBtn && (this.$menuPopupBtn.remove(), this.$menuPopupBtn = null) }, _selectCol: function (e, n) { this._unselect(); var i = this.$element.find("th"), o = this.$element.find("tbody tr"), l = t(i[e]); l.addClass("flxtblColSelected"), n && l.addClass("flxtblColMarked"); for (var s = 0; s < o.length; s++) { var a = t(o[s]).find("td"), d = t(a[e]); d.addClass("flxtblColSelected"), n && d.addClass("flxtblColMarked") } }, _selectRow: function (e, n) { this._unselect(); var i = this.$element.find("tbody tr"), o = t(i[e - 1]).find("td"); o.addClass("flxtblRowSelected"), n && o.addClass("flxtblRowMarked") }, _selectCell: function (e, n, i) { this._unselect(); var o = this.$element.find("tbody tr"), l = t(o[e - 1]).find("td").eq(n); l.addClass("cellSelected"), i && l.addClass("cellMarked") }, _onCutAction: function (t, e, n) { this._onCopyAction(t, e, n), this.clipBoard.cutPending = !0 }, _onCopyAction: function (e, n, i) { if (this._clearClipBoard(), this.clipBoard = { cutPending: !1, cellEl: e, rowIndex: n, colIndex: i }, 0 == n) { this.clipBoard.dataType = 0; var o = t(e); this.clipBoard.data = [o.val()]; for (var l = this.$element.find("tbody tr"), s = 0; s < l.length; s++) o = t(l[s]).find("td input").eq(i - 1), this.clipBoard.data.push(o.val()) } else if (0 == i) { this.clipBoard.dataType = 1, this.clipBoard.data = []; for (var l = this.$element.find("tbody tr"), a = t(l[n - 1]).find("td input"), d = 0; d < a.length; d++) { var o = t(a[d]); this.clipBoard.data.push(o.val()) } } else this.clipBoard.dataType = 2, this.clipBoard.data = t(e).val(); this._onCellClicked(e, n, i, !0) }, _onPasteAction: function (e, n, i) { if (this.clipBoard) if (0 == n && 0 == this.clipBoard.dataType) { var o = t(e); o.val(this.clipBoard.data[0]); for (var l = this.$element.find("tbody tr"), s = 0; s < l.length; s++) o = t(l[s]).find("td input").eq(i - 1), o.val(this.clipBoard.data[s + 1]); if (this.clipBoard.cutPending) { o = t(this.clipBoard.cellEl), o.val(""); for (var s = 0; s < l.length; s++) o = t(l[s]).find("td input").eq(this.clipBoard.colIndex - 1), o.val(""); this._clearClipBoard() } } else if (0 == i && 1 == this.clipBoard.dataType) { for (var l = this.$element.find("tbody tr"), a = t(l[n - 1]).find("td input"), d = 0; d < a.length; d++) { var o = t(a[d]); o.val(this.clipBoard.data[d]) } if (this.clipBoard.cutPending) { a = t(l[this.clipBoard.rowIndex - 1]).find("td input"); for (var d = 0; d < a.length; d++) { var o = t(a[d]); o.val("") } this._clearClipBoard() } } else 2 == this.clipBoard.dataType && (t(e).val(this.clipBoard.data), this.clipBoard.cutPending && (t(this.clipBoard.cellEl).val(""), this._clearClipBoard())); this._onCellClicked(e, n, i) }, _onInsertColAction: function (e, n) { var i = this, o = '<td><input type="text" value="" placeholder="..." /></td>', l = this.$element.find("tbody tr"), s = this.$element.find("thead tr"), a = t('<th><input type="text" value="" placeholder="' + this.settings.texts.columnName + '" /></th>'); s.find("th").eq(n).before(a), a.find("input").on("click.table input.table", function (t) { i._onInputEvent(this, t) }); for (var d = 0; d < l.length; d++) a = t(o), t(l[d]).find("td").eq(n).before(a), a.find("input").on("click.table input.table", function (t) { i._onInputEvent(this, t) }); this.nrofDataCols++, n++, this._onCellClicked(e, 0, n) }, _onDeleteColAction: function (e) { if (this.nrofDataCols > 1) { this.$element.find("thead tr th").eq(e).remove(); for (var n = this.$element.find("tbody tr"), i = 0; i < n.length; i++) t(n[i]).find("td").eq(e).remove(); this.nrofDataCols-- } e > this.nrofDataCols && e--; var o = this.$element.find("thead input"), l = o[e - 1]; this._onCellClicked(l, 0, e) }, _onInsertRowAction: function (e, n) { var i = this, o = '<td><input type="text" value="" placeholder="..." /></td>', l = this.$element.find("tbody tr"), s = "<tr><td><span>"; s += n, s += "</span></td>"; for (var a = 0; a < this.nrofDataCols; a++) s += o; s += "</tr>"; var d = t(s); t(l[n - 1]).before(d); for (var r = n - 1; r < l.length; r++) { var c = t(l[r]).find("td:first span"); c.text(r + 2) } d.find("input").on("click.table input.table", function (t) { i._onInputEvent(this, t) }), d.find("td:first").on("click.table", function (t) { i._onRowEvent(this, t) }), this.nrofDataRows++, n++, this._onCellClicked(e, n, 0) }, _onDeleteRowAction: function (e) { var n = this.$element.find("tbody tr"); if (n.length > 1) { t(n[e - 1]).remove(); for (var i = e; i < n.length; i++) { var o = t(n[i]).find("td:first span"); o.text(i) } this.nrofDataRows-- } var l = e; l == n.length && (l--, 0 != l && (l--, e--)); var s = t(n[l]).find("td:first"); this._onCellClicked(s[0], e, 0) }, _onMenuPopupBtnClicked: function (e, n, i) { var o = '<div class="dialogPopUp menuPopup"><div class="cutMenuAction">'; o += this.settings.texts.cut, o += '</div><div class="copyMenuAction">', o += this.settings.texts.copy; var l = !1; this.clipBoard && (0 == n && 0 == this.clipBoard.dataType || 0 == i && 1 == this.clipBoard.dataType || 0 != n && 0 != i && 2 == this.clipBoard.dataType) ? (o += '</div><div class="pasteMenuAction">', o += this.settings.texts.paste, l = !0) : (o += '</div><div class="pasteDisabledMenuAction">', o += this.settings.texts.paste), 0 == n ? (o += '</div><div class="insertColMenuAction ">', o += this.settings.texts.insert, o += this.nrofDataCols > 1 ? '</div><div class="deleteColMenuAction">' : '</div><div class="deleteColDisabledMenuAction">', o += this.settings.texts.remove) : 0 == i && (o += '</div><div class="insertRowMenuAction ">', o += this.settings.texts.insert, o += this.nrofDataRows > 1 ? '</div><div class="deleteRowMenuAction">' : '</div><div class="deleteRowDisabledMenuAction">', o += this.settings.texts.remove), o += "</div></div>", this.$menuPopup = t(o), this.$element.append(this.$menuPopup); var s = this._getAbsPosition(this.$btnParent, this.$menuPopup.outerWidth(), this.$menuPopup.height()); this.$menuPopup.css(s), this.$menuPopup.dialog({ modal: !1 }), this.$menuPopupBtn.remove(), this.$menuPopupBtn = null; var a = this; this.$menuPopup.find(".cutMenuAction").on("click.table", function (t) { t.stopPropagation(), a._onCutAction(e, n, i) }), this.$menuPopup.find(".copyMenuAction").on("click.table", function (t) { t.stopPropagation(), a._onCopyAction(e, n, i) }), l && this.$menuPopup.find(".pasteMenuAction").on("click.table", function (t) { t.stopPropagation(), a._onPasteAction(e, n, i) }), 0 == n ? (this.$menuPopup.find(".insertColMenuAction").on("click.table", function (t) { t.stopPropagation(), a._onInsertColAction(e, i) }), this.nrofDataCols > 1 && this.$menuPopup.find(".deleteColMenuAction").on("click.table", function (t) { t.stopPropagation(), a._onDeleteColAction(i) })) : 0 == i && (this.$menuPopup.find(".insertRowMenuAction").on("click.table", function (t) { t.stopPropagation(), a._onInsertRowAction(e, n) }), this.nrofDataRows > 1 && this.$menuPopup.find(".deleteRowMenuAction").on("click.table", function (t) { t.stopPropagation(), a._onDeleteRowAction(n) })) }, _onCellClicked: function (e, n, i, o) { var l = -2, s = 25; if (this.$btnParent = t(e).parent(), 0 == n) { this._selectCol(i, o); var a = this.$element.find("tbody tr:last"); this.$btnParent = a.find("td").eq(i) } else 0 == i ? (this._selectRow(n, o), this.$btnParent = t(e).parent().find("td:first")) : this._selectCell(n, i, o); this.$menuPopupBtn && this.$menuPopupBtn.remove(), this.$menuPopupBtn = t('<div class="dialogPopUp menuPopupBtn"></div>'), this.$menuPopupBtn.css({ left: l, top: s }), this.$btnParent.append(this.$menuPopupBtn), this.$menuPopupBtn.dialog({ modal: !1 }); var d = this; this.$menuPopupBtn.on("click.table", function (t) { t.stopPropagation(), d._onMenuPopupBtnClicked(e, n, i) }) }, _onInputEvent: function (e, n) { switch (n.stopPropagation(), n.type) { case "click": var i = t(e).parent().is("th") ? 0 : t(e).parent().parent().index() + 1, o = t(e).parent().index(); this._onCellClicked(e, i, o); break; case "input": this._unselect(), this._removeMenuPopupBtn(), this._clearClipBoard() } }, _onRowEvent: function (e, n) { n.stopPropagation(); var i = t(e).parent().index() + 1; this._onCellClicked(e, i, 0) }, _renderTable: function () { var e = this, n = this.settings.content; if (n && 0 != n.length) { this.nrofDataCols = n[0].length, this.nrofDataRows = n.length - 1; var i = '<table class="flexTable '; if (i += this.settings.addTableClass, i += '">', this.settings.headerIncluded) { i += "<thead><tr><th></th>"; for (var o = 0; o < this.nrofDataCols; o++) i += '<th><input type="text" value="', i += n[0][o], i += '" placeholder="', i += this.settings.texts.columnName, i += '" /></th>'; i += "</tr></thead>" } i += "<tbody>"; for (var l = 1; l < n.length; l++) { i += "<tr><td><span>", i += l, i += "</span></td>"; for (var o = 0; o < this.nrofDataCols; o++) i += '<td><input type="text" value="', i += (n[l][o] + "").replace(/\"/g, "&quot;"), i += '" placeholder="..." /></td>'; i += "</tr>" } i += "</tbody></table>", this.$element.addClass("flexTableContainer"), this.$table = t(i), this.$element.append(this.$table), this.$element.find("input").on("click.table input.table", function (t) { e._onInputEvent(this, t) }), this.$element.find("tbody td:first-child").on("click.table", function (t) { e._onRowEvent(this, t) }) } t("body").on("click.table keyup.table", function (t) { "click" == t.type ? (e._unselect(), e._removeMenuPopupBtn()) : "keyup" == t.type && 27 === t.keyCode && (e._clearClipBoard(), e._unselect()) }), this.state = "presented" }, _init: function (e) { var n = { headerIncluded: !0, addTableClass: "", texts: s, onOpen: function () { }, onClose: function () { } }; this.settings = t.extend(n, e || {}), this.nrofDataCols = 0, this.nrofDataRows = 0, this.clipBoard = null, this.state = "initialized" }, getData: function (e) { var n = [], i = this.$element.find("thead tr"); if (1 == i.length) { for (var o = i.find("input"), l = [], s = 0; s < o.length; s++) { var a = t(o[s]).val(); l.push(a) } n.push(l); for (var d = this.$element.find("tbody tr"), r = 0; r < d.length; r++) { o = t(d[r]).find("input"), l = []; for (var s = 0; s < o.length; s++) { var a = t(o[s]).val(); l.push(a) } n.push(l) } } return n }, close: function (e) { this._unselectAll(), this.$table.remove(), t("body").off(), this.state = "closed" }, destroy: function (e) { this.close(), t.removeData(this.$element[0], l) } }, t.fn[l] = function (e) { var n = t(this).data(l); return n && e && "object" != typeof e && 0 != e.indexOf("_") ? n[e](Array.prototype.slice.call(arguments, 1)) : "object" != typeof e && e ? (t.error("Wrong call to " + l), this) : (n = new o(this, e), t(this).data(l, n), this) } }(jQuery);