(function (n) { function f(t, i) { this.$element = n(t), this._init(i), this._renderTable() } var o = "1.0.0", u = "flextabledit", e = { cut: "Cut", copy: "Copy", paste: "Paste", insert: "Insert", erase: "Erase", remove: "Remove", columnName: "Column name" }; f.prototype = { _getAbsPosition: function (t, i) { var c = n(window).width(), f = t.offset(), e = this.$element.offset(), o = this.$table.outerWidth(), u = f.left - e.left - 1, s, h; return u + i > o && (u = o - i, u < 0 && (u = 0)), s = f.top - e.top + 26, h = { left: u, right: 0, top: s }, h }, _unselect: function () { var i, t; for (this.$element.find("th").removeClass("flxtblColSelected"), i = this.$element.find("tbody tr"), t = 0; t < i.length; t++) n(i[t]).find("td").removeClass("flxtblColSelected flxtblRowSelected cellSelected"); this.$menuPopup && (this.$menuPopup.remove(), this.$menuPopup = null) }, _clearClipBoard: function () { var i, t; for (this.$element.find("th").removeClass("flxtblColMarked"), i = this.$element.find("tbody tr"), t = 0; t < i.length; t++) n(i[t]).find("td").removeClass("flxtblColMarked flxtblRowMarked cellMarked"); this.clipBoard = null }, _removeMenuPopupBtn: function () { this.$menuPopupBtn && (this.$menuPopupBtn.remove(), this.$menuPopupBtn = null) }, _unselectAll: function () { this._unselect(), this.$menuPopupBtn && (this.$menuPopupBtn.remove(), this.$menuPopupBtn = null) }, _selectCol: function (t, i) { var r, o, u; this._unselect(); var s = this.$element.find("th"), f = this.$element.find("tbody tr"), e = n(s[t]); for (e.addClass("flxtblColSelected"), i && e.addClass("flxtblColMarked"), r = 0; r < f.length; r++) o = n(f[r]).find("td"), u = n(o[t]), u.addClass("flxtblColSelected"), i && u.addClass("flxtblColMarked") }, _selectRow: function (t, i) { this._unselect(); var u = this.$element.find("tbody tr"), r = n(u[t - 1]).find("td"); r.addClass("flxtblRowSelected"), i && r.addClass("flxtblRowMarked") }, _selectCell: function (t, i, r) { this._unselect(); var f = this.$element.find("tbody tr"), u = n(f[t - 1]).find("td").eq(i); u.addClass("cellSelected"), r && u.addClass("cellMarked") }, _onCutAction: function (n, t, i) { this._onCopyAction(n, t, i), this.clipBoard.cutPending = !0 }, _onCopyAction: function (t, i, r) { var e, f, s, o, u; if (this._clearClipBoard(), this.clipBoard = { cutPending: !1, cellEl: t, rowIndex: i, colIndex: r }, i == 0) for (this.clipBoard.dataType = 0, u = n(t), this.clipBoard.data = [u.val()], f = this.$element.find("tbody tr"), e = 0; e < f.length; e++) u = n(f[e]).find("td input").eq(r - 1), this.clipBoard.data.push(u.val()); else if (r == 0) for (this.clipBoard.dataType = 1, this.clipBoard.data = [], f = this.$element.find("tbody tr"), s = n(f[i - 1]).find("td input"), o = 0; o < s.length; o++) u = n(s[o]), this.clipBoard.data.push(u.val()); else this.clipBoard.dataType = 2, this.clipBoard.data = n(t).val(); this._onCellClicked(t, i, r, !0) }, _onPasteAction: function (t, i, r) { var f, o, s, e, u; if (this.clipBoard) if (i == 0 && this.clipBoard.dataType == 0) { for (u = n(t), u.val(this.clipBoard.data[0]), o = this.$element.find("tbody tr"), f = 0; f < o.length; f++) u = n(o[f]).find("td input").eq(r - 1), u.val(this.clipBoard.data[f + 1]); if (this.clipBoard.cutPending) { for (u = n(this.clipBoard.cellEl), u.val(""), f = 0; f < o.length; f++) u = n(o[f]).find("td input").eq(this.clipBoard.colIndex - 1), u.val(""); this._clearClipBoard() } } else if (r == 0 && this.clipBoard.dataType == 1) { for (o = this.$element.find("tbody tr"), s = n(o[i - 1]).find("td input"), e = 0; e < s.length; e++) u = n(s[e]), u.val(this.clipBoard.data[e]); if (this.clipBoard.cutPending) { for (s = n(o[this.clipBoard.rowIndex - 1]).find("td input"), e = 0; e < s.length; e++) u = n(s[e]), u.val(""); this._clearClipBoard() } } else this.clipBoard.dataType == 2 && (n(t).val(this.clipBoard.data), this.clipBoard.cutPending && (n(this.clipBoard.cellEl).val(""), this._clearClipBoard())); this._onCellClicked(t, i, r) }, _onInsertColAction: function (t, i) { var f = this, o = '<td><input type="text" value="" placeholder="..." /></td>', e = this.$element.find("tbody tr"), s = this.$element.find("thead tr"), r = n('<th><input type="text" value="" placeholder="' + this.settings.texts.columnName + '" /></th>'), u; s.find("th").eq(i).before(r); r.find("input").on("click.table input.table", function (n) { f._onInputEvent(this, n) }); for (u = 0; u < e.length; u++) { r = n(o), n(e[u]).find("td").eq(i).before(r); r.find("input").on("click.table input.table", function (n) { f._onInputEvent(this, n) }) } this.nrofDataCols++, i++, this._onCellClicked(t, 0, i) }, _onDeleteColAction: function (t) { var r, i, u, f; if (this.nrofDataCols > 1) { for (this.$element.find("thead tr th").eq(t).remove(), r = this.$element.find("tbody tr"), i = 0; i < r.length; i++) n(r[i]).find("td").eq(t).remove(); this.nrofDataCols-- } t > this.nrofDataCols && t--, u = this.$element.find("thead input"), f = u[t - 1], this._onCellClicked(f, 0, t) }, _onInsertRowAction: function (t, i) { var s = this, c = '<td><input type="text" value="" placeholder="..." /></td>', e = this.$element.find("tbody tr"), r = "<tr><td><span>", o, f, u, h; for (r += i, r += "</span></td>", o = 0; o < this.nrofDataCols; o++) r += c; for (r += "</tr>", f = n(r), n(e[i - 1]).before(f), u = i - 1; u < e.length; u++) h = n(e[u]).find("td:first span"), h.text(u + 2); f.find("input").on("click.table input.table", function (n) { s._onInputEvent(this, n) }); f.find("td:first").on("click.table", function (n) { s._onRowEvent(this, n) }); this.nrofDataRows++, i++, this._onCellClicked(t, i, 0) }, _onDeleteRowAction: function (t) { var i = this.$element.find("tbody tr"), u, f, r, e; if (i.length > 1) { for (n(i[t - 1]).remove(), u = t; u < i.length; u++) f = n(i[u]).find("td:first span"), f.text(u); this.nrofDataRows-- } r = t, r == i.length && (r--, r != 0 && (r--, t--)), e = n(i[r]).find("td:first"), this._onCellClicked(e[0], t, 0) }, _onMenuPopupBtnClicked: function (t, i, r) { var u = '<div class="dialogPopUp menuPopup"><div class="cutMenuAction">', e, o, f; u += this.settings.texts.cut, u += '</div><div class="copyMenuAction">', u += this.settings.texts.copy, e = !1, this.clipBoard && (i == 0 && this.clipBoard.dataType == 0 || r == 0 && this.clipBoard.dataType == 1 || i != 0 && r != 0 && this.clipBoard.dataType == 2) ? (u += '</div><div class="pasteMenuAction">', u += this.settings.texts.paste, e = !0) : (u += '</div><div class="pasteDisabledMenuAction">', u += this.settings.texts.paste), i == 0 ? (u += '</div><div class="insertColMenuAction ">', u += this.settings.texts.insert, u += this.nrofDataCols > 1 ? '</div><div class="deleteColMenuAction">' : '</div><div class="deleteColDisabledMenuAction">', u += this.settings.texts.remove) : r == 0 && (u += '</div><div class="insertRowMenuAction ">', u += this.settings.texts.insert, u += this.nrofDataRows > 1 ? '</div><div class="deleteRowMenuAction">' : '</div><div class="deleteRowDisabledMenuAction">', u += this.settings.texts.remove), u += "</div></div>", this.$menuPopup = n(u), this.$element.append(this.$menuPopup), o = this._getAbsPosition(this.$btnParent, this.$menuPopup.outerWidth(), this.$menuPopup.height()), this.$menuPopup.css(o), this.$menuPopup.dialog({ modal: !1 }), this.$menuPopupBtn.remove(), this.$menuPopupBtn = null, f = this; this.$menuPopup.find(".cutMenuAction").on("click.table", function (n) { n.stopPropagation(), f._onCutAction(t, i, r) }); this.$menuPopup.find(".copyMenuAction").on("click.table", function (n) { n.stopPropagation(), f._onCopyAction(t, i, r) }); if (e) this.$menuPopup.find(".pasteMenuAction").on("click.table", function (n) { n.stopPropagation(), f._onPasteAction(t, i, r) }); if (i == 0) { this.$menuPopup.find(".insertColMenuAction").on("click.table", function (n) { n.stopPropagation(), f._onInsertColAction(t, r) }); if (this.nrofDataCols > 1) this.$menuPopup.find(".deleteColMenuAction").on("click.table", function (n) { n.stopPropagation(), f._onDeleteColAction(r) }) } else if (r == 0) { this.$menuPopup.find(".insertRowMenuAction").on("click.table", function (n) { n.stopPropagation(), f._onInsertRowAction(t, i) }); if (this.nrofDataRows > 1) this.$menuPopup.find(".deleteRowMenuAction").on("click.table", function (n) { n.stopPropagation(), f._onDeleteRowAction(i) }) } }, _onCellClicked: function (t, i, r, u) { var o = -2, s = 25, f, e; this.$btnParent = n(t).parent(), i == 0 ? (this._selectCol(r, u), f = this.$element.find("tbody tr:last"), this.$btnParent = f.find("td").eq(r)) : r == 0 ? (this._selectRow(i, u), this.$btnParent = n(t).parent().find("td:first")) : this._selectCell(i, r, u), this.$menuPopupBtn && this.$menuPopupBtn.remove(), this.$menuPopupBtn = n('<div class="dialogPopUp menuPopupBtn"></div>'), this.$menuPopupBtn.css({ left: o, top: s }), this.$btnParent.append(this.$menuPopupBtn), this.$menuPopupBtn.dialog({ modal: !1 }), e = this; this.$menuPopupBtn.on("click.table", function (n) { n.stopPropagation(), e._onMenuPopupBtnClicked(t, i, r) }) }, _onInputEvent: function (t, i) { i.stopPropagation(); switch (i.type) { case "click": var r = n(t).parent().is("th") ? 0 : n(t).parent().parent().index() + 1, u = n(t).parent().index(); this._onCellClicked(t, r, u); break; case "input": this._unselect(), this._removeMenuPopupBtn(), this._clearClipBoard() } }, _onRowEvent: function (t, i) { i.stopPropagation(); var r = n(t).parent().index() + 1; this._onCellClicked(t, r, 0) }, _renderTable: function () { var u = this, r = this.settings.content, t, f, i; if (r && r.length != 0) { if (this.nrofDataCols = r[0].length, this.nrofDataRows = r.length - 1, t = '<table class="flexTable ', t += this.settings.addTableClass, t += '">', this.settings.headerIncluded) { for (t += "<thead><tr><th></th>", i = 0; i < this.nrofDataCols; i++) t += '<th><input type="text" value="', t += r[0][i], t += '" placeholder="', t += this.settings.texts.columnName, t += '" /></th>'; t += "</tr></thead>" } for (t += "<tbody>", f = 1; f < r.length; f++) { for (t += "<tr><td><span>", t += f, t += "</span></td>", i = 0; i < this.nrofDataCols; i++) t += '<td><input type="text" value="', t += r[f][i], t += '" placeholder="..." /></td>'; t += "</tr>" } t += "</tbody></table>", this.$element.addClass("flexTableContainer"), this.$table = n(t), this.$element.append(this.$table); this.$element.find("input").on("click.table input.table", function (n) { u._onInputEvent(this, n) }); this.$element.find("tbody td:first-child").on("click.table", function (n) { u._onRowEvent(this, n) }) } n("body").on("click.table keyup.table", function (n) { n.type == "click" ? (u._unselect(), u._removeMenuPopupBtn()) : n.type == "keyup" && n.keyCode === 27 && (u._clearClipBoard(), u._unselect()) }); this.state = "presented" }, _init: function (t) { var r = this, i = { headerIncluded: !0, addTableClass: "", texts: e, onOpen: function () { }, onClose: function () { } }; this.settings = n.extend(i, t || {}), this.nrofDataCols = 0, this.nrofDataRows = 0, this.clipBoard = null, this.state = "initialized" }, getData: function () { var o = [], h = this.$element.find("thead tr"), r, u, s, e, i, f; if (h.length == 1) { for (r = h.find("input"), u = [], i = 0; i < r.length; i++) f = n(r[i]).val(), u.push(f); for (o.push(u), s = this.$element.find("tbody tr"), e = 0; e < s.length; e++) { for (r = n(s[e]).find("input"), u = [], i = 0; i < r.length; i++) f = n(r[i]).val(), u.push(f); o.push(u) } } return o }, close: function () { this._unselectAll(), this.$table.remove(), n("body").off(), this.state = "closed" }, destroy: function () { this.close(), n.removeData(this.$element[0], u) } }, n.fn[u] = function (t) { var i = n(this).data(u); return i && t && typeof t != "object" && t.indexOf("_") != 0 ? i[t](Array.prototype.slice.call(arguments, 1)) : typeof t == "object" || !t ? (i = new f(this, t), n(this).data(u, i), this) : (n.error("Wrong call to " + u), this) } })(jQuery);